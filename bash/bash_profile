MY_PROJECTS_DIR="$HOME/Documents/personal/projects"

alias isodate='date -u +%Y-%m-%dT%H:%M:%SZ'
alias me='cd "$MY_PROJECTS_DIR"'
alias wipe='clear && printf "\e[3J"'

# Get the PATH updated ASAP so none of the system binaries interfere where
#   they're generally undesireable.
eval "$(/opt/homebrew/bin/brew shellenv)"

# Will only have to download things once.
git_version="v$(git version | awk '{print $NF}')"
if [[ "$0" == *zsh* ]]; then
    completion_file="$HOME/.git-$git_version-completion.zsh"
    function_file="$HOME/.zsh/functions/_git"
    if [ ! -f "$completion_file" ]; then
        curl -sSL "https://raw.githubusercontent.com/git/git/$git_version/contrib/completion/git-completion.zsh" > "$completion_file"
        mkdir -p "$(dirname $function_file)"
        cp "$completion_file" "$function_file"
    fi

    # Older/newer versions of zsh may need "~/.zsh/functions"?
    fpath=(~/.zsh $fpath)
    autoload -Uz compinit && compinit
elif [[ "$0" == *bash* ]]; then
    completion_file="$HOME/.git-$git_version-completion.bash"
    if [ ! -f "$completion_file" ]; then
        curl -sSL "https://raw.githubusercontent.com/git/git/$git_version/contrib/completion/git-completion.bash" > "$completion_file"
    fi

    # May have to look into restoring some functionality from:
    #  https://github.com/Eagerod/dotfiles/blob/ce33011/git/git.sh#L16-L23
    # If using Cygwin anytime soon.

    source "$completion_file"
else
   echo >&2 "Shell ($0) not configured for git completion."
fi

prompt_file="$HOME/.git-$git_version-prompt.sh"
if [ ! -f "$prompt_file" ]; then
    curl -fsSL "https://raw.githubusercontent.com/git/git/$git_version/contrib/completion/git-prompt.sh" > "$prompt_file"
fi
source "$prompt_file"

unset git_version prompt_file completion_file function_file

if [ "$(uname)" = "Linux" ]; then
    alias pbcopy='xclip -selection clipboard'
    alias pbpaste='xclip -selection clipboard -o'
    alias open='xdg-open'
elif [ "$(uname)" = "Darwin" ]; then
    alias showhidden='defaults write com.apple.finder AppleShowAllFiles YES && killall Finder'
    alias hidehidden='defaults write com.apple.finder AppleShowAllFiles NO && killall Finder'
fi

export HISTTIMEFORMAT="[%FT%T] "

__get_git_remote_urls() {
    git remote -v | awk '{print $2}' | sed 's_git@_https://_; s_.com:_.com/_' | sort | uniq
}

__get_named_git_remote_urls() {
    if [ $# -ne 1 ]; then
        echo >&2 "Usage: $0 <remote pattern>"
        return 1
    fi
    remotes=($(__get_git_remote_urls | grep "$1"))
    if [ ${#remotes} -eq 0 ]; then
        echo >&2 "No $1 remotes found for this repository."
        return 1
    fi
    if [ ${#remotes} -ne 1 ]; then
        echo >&2 "Multiple $1 remotes found; unsure how to proceed."
        return 1
    fi

    echo "$remotes"
}

gh() {
    if ! open_domain="$(__get_named_git_remote_urls github.com)"; then
        return $?
    fi

    open "$open_domain"
}

gt() {
    if ! open_domain="$(__get_named_git_remote_urls gitea.internal.aleemhaji.com)"; then
        return $?
    fi

    open "$open_domain"
}

# Provided to explicitly have custom behaviour on machines used for different
#   purposes.
if [ -f ~/.bash_profile_extra ]; then
    source ~/.bash_profile_extra
fi

if git -C "${MY_PROJECTS_DIR}/dotfiles" status --porcelain | grep -q .; then
	echo "\e[0;31mThere are uncommitted changes in dotfiles...\e[0m"
fi

if git -C "${MY_PROJECTS_DIR}/dotfiles" diff master origin/master | grep -q .; then
	echo "\e[0;31mLocal and remote dotfiles out of sync...\e[0m"
fi
